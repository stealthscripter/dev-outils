generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  bookmarks     Bookmark[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Website {
  id          Int        @id @default(autoincrement())
  title       String
  url         String     @unique
  slug        String     @unique
  imageUrl    String? // optional image
  description String? // optional description
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  Int
  bookmarks   Bookmark[]
  tags        Tag[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("website")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  websites  Website[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("category")
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  userId    String // Match User.id type (which is String)
  user      User     @relation(fields: [userId], references: [id])
  websiteId Int
  website   Website  @relation(fields: [websiteId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, websiteId])
  @@map("bookmark")
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  websites Website[]

  @@map("tag")
}
